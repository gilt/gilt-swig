#!/bin/sh
#
#  ________  ___       __   ___  ________
# |\   ____\|\  \     |\  \|\  \|\   ____\
# \ \  \___|\ \  \    \ \  \ \  \ \  \___|
#  \ \_____  \ \  \  __\ \  \ \  \ \  \  ___
#   \|____|\  \ \  \|\__\_\  \ \  \ \  \|\  \
#     ____\_\  \ \____________\ \__\ \_______\
#    |\_________\|____________|\|__|\|_______|
#    \|_________|

#    It's delicious.
#    Brought to you by the fine folks at Gilt (http://github.com/gilt)

bold=$(tput bold)
underline=$(tput sgr 0 1)
reset=$(tput sgr0)

red=$(tput setaf 1)
gray=$(tput setaf 8)
white=$(tput setaf 7)

dir=`dirname $0`
bin=`perl -e "print readlink '$0'"`
dir=`dirname $dir/$bin`
pkg=$(cat $dir/../package.json)

function version {
  prop='version'
  temp=`echo $pkg | sed 's/\\\\\//\//g' | sed 's/[{}]//g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | sed 's/\"\:\"/\|/g' | sed 's/[\,]/ /g' | sed 's/\"//g' | grep "$prop:" | cut -d":" -f2 | sed -e 's/^ *//g' -e 's/ *$//g' `
  echo ${temp##*|}
}

export SWIG_VERSION=`version`

#echo "·\n· ${bold}${white}hey guys! oh big gulps eh? - ${underline}${grey}http://youtu.be/praFGD51ih8${reset}\n·"
echo "·"
echo "·  ${red}swig${reset}         v$SWIG_VERSION"

# NVM is used here as a convenience and an assertion that we're using the right
# version of node. It's not required in production, as production should be using
# the right version of node natively.
if [ "$NODE_ENV" != "production" ]; then

  # source nvm for this session
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

  # run node 5 allow errors to pass through to the user.

  if ls $NVM_DIR/versions/node/v5.* 1> /dev/null 2>&1; then
    echo "Node v5 already installed" 1> /dev/null 2>&1
  else
    echo ".  ${gray}You don't have node v5 installed, doing that now:${reset}"
    nvm install 5
  fi

  nvm use 5 >/dev/null
fi

if [ "$1" == "init" ]; then
  node --harmony "$dir/../lib/init.js"
  exit
fi

if [ "$1" == "update" ]; then
  node --harmony "$dir/../lib/update.js"
  exit
fi

if [ "$1" == "pre-publish" ]; then
  node --harmony "$dir/../lib/pre-publish" "$@"
  # --vendor
  # --less
  exit
fi

if [ "$1" == "help" ]; then
  # reset the args passed to wrap the task name we want help with
  # prevents gulp from trying to run two tasks
  set -- "$1" "--task=$2"
fi

if [ ! -e "`which gulp`" ]; then
  echo ".  ${gray}You don't have gulp installed globally, doing that now:${reset}"
  echo ".  ${gray}Installing with sudo...${reset}"
  sudo npm install -g gulp --registry=https://registry.npmjs.org/ --loglevel=warn
  echo ".  ${gray}Global gulp installed.${reset}"
fi

# pass control to gulp
node --harmony "$dir/../lib/update.js" && node --harmony --harmony-proxies `which gulp` "$@"
