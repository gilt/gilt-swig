#!/bin/sh

  # NOTE: IF YOU UPDATE THIS FILE, PLEASE ALSO UPDATE util-eng/swig
  #
  # WHAT THIS DOES
  #
  # Asserts if NVM is installed.
  # Asserts Node v0.11 is installed.
  # Assets Gulp is installed.
  # Clones gilt-swig if it doesn't exist.
  # Checks gilt-swig tags and updates /web/gilt-swig to current tag if needed.
  #
  # FIN

nvm_latest="0.13.1"
nvm_url="https://raw.githubusercontent.com/creationix/nvm/v$nvm_latest/install.sh"
nvm_path="$HOME/.nvm/nvm.sh"
nvm_source="[ $nvm_path ] && . $nvm_path"
nvm_installed=""

if [ -e $nvm_path ] ; then
  eval $nvm_source #>/dev/null 2>&1
  nvm_installed=$(nvm --version)
fi

if [ "$nvm_latest" != "$nvm_installed" ] ; then
  if [ -z "$nvm_installed" ] ; then
    echo "\033[36mUpdating NVM (Node Version Manager)...\033[0m\n"
  else
    echo "\033[36mInstalling NVM (Node Version Manager)...\033[0m\n"
  fi

  curl -s "$nvm_url" | bash
  echo "=> Disregard previous line. (it's silly)"
  eval $nvm_source >/dev/null 2>&1
fi

nvm install 0.11 >/dev/null 2>&1
nvm use v0.11 >/dev/null 2>&1

# Assert that gulp is installed.

gulp_version=`gulp -v >/dev/null 2>&1`
if [ -z "$gulp_version" ] ; then
  echo '\033[33mInstalling Gulp...\033[0m'
  sudo npm install -g gulp --registry=https://registry.npmjs.org/ >/dev/null 2>&1
else
  sudo npm update -g gulp --registry=https://registry.npmjs.org/ >/dev/null 2>&1
fi

  # This portion is the entry point for the gilt-swig repo. We will clone the
  # gilt-swig repo if it does not already exist and we will attempt to
  # auto-update the repo to the latest tag. If the repo is already checked out on
  # a branch (including master) or a specific git-sha (e.g. we're NOT on a tag
  # already) we will NOT auto-update. Finally, after any downloading or updates,
  # we will pass control to /web/gilt-swig, including any command line arguments
  # that were provided

# The name of the repo that has all of the actual business logic
repo_name="gilt-swig"
tool_name="swig"
preamble="\033[33mRunning $tool_name"

# Determine if we already have our repo
if [ ! -d "/web/$repo_name" ] ; then
  echo '\033[33mCloning gilt-swig...\033[0m'

  # If not, clone it
  cd /web
  git clone "git@github.com:gilt/gilt-swig.git" "$repo_name"

  # And check out the latest tag so we get updates in the future
  cd /web/$repo_name
  git fetch --tags
  latest=`git describe --abbrev=0 --tags 2>&1`

  if [ -z "$latest" ] ; then
    $(cd /web/$repo_name && git checkout $latest)
  fi

else

  # If our repo already exists, determine if we are on a tag (e.g. not a branch or a sha)
  if [ ! $(cd /web/$repo_name && git symbolic-ref HEAD 2>/dev/null)  ] ; then
    if [ $(cd /web/$repo_name && git describe --tags --exact-match HEAD 2>/dev/null) ] ; then

      # Only check for updates if we are connected to the internet
      if (ifconfig | grep 'status: active' 1>/dev/null) ; then

        tag=$(cd /web/$repo_name && git describe --tags --exact-match HEAD)

        # Determine if there is a newer tag
        latest=$(cd /web/$repo_name && git fetch --tags && git describe --tags `git rev-list --tags --max-count=1`)

        # And if so, check it out
        if [ $tag != $latest ] ; then
          echo "\033[33mUpdating $tool_name to $latest...\033[0m"
          $(cd /web/$repo_name && git checkout $latest)
          tag=$latest
        fi

        preamble+=" on a tag ($tag)"
      else
        echo '\033[31mSkipping $tool_name update check since you are offline.\033[0m'
      fi
    else
      sha=$(cd /web/$repo_name && git rev-parse --short HEAD)
      preamble+=" on a sha ($sha)"
    fi
  else
    branch=$(cd /web/$repo_name && git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

    if [ "$branch" != "master" ] ; then
      preamble+=" on a branch ($branch)"
    fi
  fi
fi

preamble+="...\033[0m"
echo  "$preamble"

# Finally, pass control to our repo...
/web/$repo_name/bin/swig "$@"